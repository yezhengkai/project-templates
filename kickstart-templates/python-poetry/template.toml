name = "python-poetry"
description = "Python template powered by package manager poetry"
kickstart_version = 1

# Optional, a list of cleanup actions to do.
# All paths listed will be deleted if the `name` has the value `value` after
# the questions have been answered and the project generated.
cleanup = [
    { name = "with_fastapi_api", value = false, paths = [
        "{{ project_name | kebab_case }}/src/{{ package_name | snake_case }}/api.py",
        "{{ project_name | kebab_case }}/tests/test_api.py",
    ] },
    { name = "with_sentry_logging", value = false, paths = [
        "{{ project_name | kebab_case }}/src/{{ package_name | snake_case }}/sentry.py",
        "{{ project_name | kebab_case }}/tests/test_sentry.py",
    ] },
    { name = "with_streamlit_app", value = false, paths = [
        "{{ project_name | kebab_case }}/src/{{ package_name | snake_case }}/app.py",
    ] },
    { name = "with_typer_cli", value = false, paths = [
        "{{ project_name | kebab_case }}/src/{{ package_name | snake_case }}/cli.py",
        "{{ project_name | kebab_case }}/tests/test_cli.py",
    ] },
    { name = "continuous_integration", value = "GitHub", paths = [
        "{{ project_name | kebab_case }}/.gitlab-ci.yml",
    ] },
    { name = "continuous_integration", value = "GitLab", paths = [
        "{{ project_name | kebab_case }}/.github/",
    ] },
    { name = "is_deployable_app", value = "false", paths = [
        "{{ project_name | kebab_case }}/.github/workflows/deploy.yml",
    ] },
    { name = "is_publishable_package", value = "false", paths = [
        "{{ project_name | kebab_case }}/.github/workflows/publish.yml",
    ] },
]

# A list of variables, the schema is explained in detail below
[[variables]]
name = "project_name"
default = "awesome-project"
prompt = "What is the name of this project?"
validation = "^([a-zA-Z][a-zA-Z0-9_-]+)$"

[[variables]]
name = "package_name"
default = "awesome_package"
prompt = "What is the name of this package?"
validation = "^([a-zA-Z][a-zA-Z0-9_-]+)$"

[[variables]]
name = "package_description"
default = "A Python package that ..."
prompt = "A single-line description of the package."

[[variables]]
name = "package_url"
default = "https://github.com/user/my-package"
prompt = "The URL to the package's repository."

[[variables]]
name = "author_name"
default = "Zheng-Kai Ye"
prompt = "The full name of the primary author of the package."

[[variables]]
name = "author_email"
default = "supon3060@gmail.com"
prompt = "The email address of the primary author of the package."

[[variables]]
name = "python_version"
default = "3.8"
prompt = "The minimum Python version that the package requires."

[[variables]]
name = "development_environment"
default = "simple"
prompt = "Whether to configure the development environment with a focus on simplicity or with a focus on strictness. In strict mode, additional Ruff rules are added, and tools such as Mypy and Pytest are set to strict mode."
choices = ["simple", "strict"]

[[variables]]
name = "with_conventional_commits"
default = false
prompt = "If \"Yes\", Commitizen will verify that your commits follow the Conventional Commits standard. In return, cz bump may be used to automate Semantic Versioning and Keep A Changelog."

[[variables]]
name = "with_fastapi_api"
default = false
prompt = "If \"Yes\", FastAPI is added as a run time dependency, FastAPI API stubs and tests are added, a poe api command for serving the API is added, and an app stage that packages the API is added to the Dockerfile. Additionally, the CI workflow will push the application as a Docker image instead of publishing the Python package."

[[variables]]
name = "with_jupyter_lab"
default = false
prompt = "If \"Yes\", JupyterLab is added to Poetry's dev dependencies, and a poe lab command is added to start Jupyter Lab in the notebooks/ directory."

[[variables]]
name = "with_pydantic_typing"
default = false
prompt = "If \"Yes\", Pydantic is added as a run time dependency, and the Pydantic mypy plugin is enabled and configured."

[[variables]]
name = "with_sentry_logging"
default = false
prompt = "If \"Yes\", Sentry is added as a run time dependency, and a Sentry configuration stub and tests are added."

[[variables]]
name = "with_streamlit_app"
default = false
prompt = "If \"Yes\", Streamlit is added as a run time dependency, a Streamlit application stub is added, a poe app command to serve the Streamlit app is added, and an app stage that packages the Streamlit app is added to the Dockerfile. Additionally, the CI workflow will push the application as a Docker image instead of publishing the Python package."

[[variables]]
name = "with_typer_cli"
default = false
prompt = "If \"Yes\", Typer is added as a run time dependency, Typer CLI stubs and tests are added, the package itself is registered as a CLI, and an app stage is added to the Dockerfile that packages the CLI."

[[variables]]
name = "continuous_integration"
default = "GitHub"
prompt = "Whether to include a GitHub Actions or a GitLab CI/CD continuous integration workflow for testing and publishing the package or app."
choices = ["GitHub", "GitLab"]

[[variables]]
name = "is_deployable_app"
default = "{{ with_fastapi_api or with_streamlit_app }}"
prompt = "If adding FastAPI or Streamlit as a runtime dependency, you should add GitHub Actions' deploy.yml"
only_if = { name = "continuous_integration", value = "GitHub" }
validation = "^(true|false)"

[[variables]]
name = "is_publishable_package"
default = "{{ not with_fastapi_api and not with_streamlit_app }}"
prompt = "If not adding FastAPI and Streamlit as a runtime dependency, you should add GitHub Actions' publish.yml"
only_if = { name = "continuous_integration", value = "GitHub" }
validation = "^(true|false)"

[[variables]]
name = "docstring_style"
default = "NumPy"
prompt = "Whether to use and validate NumPy-style or Google-style docstrings."
choices = ["NumPy", "Google"]

[[variables]]
name = "private_package_repository_name"
default = ""
prompt = "Optional name of a private package repository to install packages from and publish this package to."

[[variables]]
name = "private_package_repository_url"
default = ""
prompt = "Optional URL of a private package repository to install packages from and publish this package to. Make sure to include the /simple suffix. For instance, when using a GitLab Package Registry this value should be of the form https://gitlab.com/api/v4/projects/ {project_id} /packages/pypi/simple."
